// A Hit is a square spawned from the fighter.
// It can be Strong or Quick. Quick hits require less time to spawn and despawn.
// Strong hits require longer time to spawn and despawn.
// While a hit is active it will block the fighter from casting a new hit.

class Hit {

  field Fighter castingFighter;
  field boolean strong;
  field boolean isBuildUp;
  field boolean isActive;
  field boolean isFinish;
  field Square body;
  field int reach;
  field int duration;
  field int activeCounter;
  field int dir;

  constructor Hit new(Fighter caster, boolean isStrong){
    let castingFighter = caster;
    let strong = isStrong;
    let isBuildUp = true;
    let isActive = false;
    let isFinish = false;
    if(strong){
      let reach = 40;
      let duration = 12;
    } else {
      let reach = 24;
      let duration = 5;
    }
    let dir = caster.getTargetDir();
    let activeCounter = 0;
    let body = Square.new(0, 0, 0, 20);
    do updateAttachment();
    return this;
  }

  method void dispose(){
    do Memory.deAlloc(body);
    do Memory.deAlloc(this);
    return;
  }

  method boolean finished() { return isFinish; }

  method void update(){
    if(isBuildUp){
      do Log.logMessage(" -- BUILDUP -- ");
      do buildUp();
    } else {
      if(isActive){
        do Log.logMessage(" -- ACTIVE -- ");
        do active();
      } else {
        do Log.logMessage(" -- RELEASE -- ");
        do release();
      }
    }
    do updateAttachment();
    do body.draw();
    return; 
  }

  method boolean hits(Fighter f){
    var Square ob;
    let ob = f.getBody();
    return (body.collides(ob) & isActive);
  }

  method void buildUp(){
    var int width;
    let width = body.getSizeX();
    do Log.logValues(width, reach);
    if(width < reach){
      do body.setWidth(width + 16);
    } else {
      let isBuildUp = false;
      let isActive = true;
    }
    return; 
  }
  
  method void release(){
    var int width, newWidth;
    let width = body.getSizeX();
    let newWidth = width - 10;
    do Log.logValues(width, 0);
    if(newWidth > 0){
      do body.setWidth(newWidth);
    } else {
      let isFinish = true;
    }
    return; 
  }

  method void updateAttachment(){
    var int attachmentX;
    var int attachmentY;
    var Square casterBody;
    let casterBody = castingFighter.getBody();
    let attachmentY = casterBody.getY() + 10;
    if (dir < 0){
      let attachmentX = casterBody.getRight(); 
    } else {
      let attachmentX = casterBody.getX() - body.getSizeX();
    }
    do body.setPosition(attachmentX, attachmentY);
    return;
  }


  method void active(){
    do Log.logValues(activeCounter, duration);
    if(activeCounter < duration){
      let activeCounter = activeCounter + 1;
    } else {
      let isActive = false; 
    }
    return; 
  }

}