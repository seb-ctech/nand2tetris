// A Hit is a square spawned from the fighter.
// It can be small or large. Small hits require less time to spawn and despawn.
// Long hits require longer time to spawn and despawn.
// While a hit is active it will block the fighter from casting a new hit.

class Hit {

  field Player castingPlayer;
  field boolean strong;
  field boolean isBuildUp;
  field boolean isActive;
  field boolean isFinish;
  field Square body;
  field int reach;
  field int duration;
  field int activeCounter;
  field int dir;

  constructor Hit new(Player caster, boolean isStrong){
    let castingPlayer = caster;
    let strong = isStrong;
    let isBuildUp = true;
    let isActive = false;
    if(isStrong){
      let reach = 28;
      let duration = 24;
    } else {
      let reach = 16;
      let duration = 14;
    }
    let dir = caster.getTargetDir();
    let activeCounter = 0;
    return this;
  }

  method void dispose(){
    do Memory.deAlloc(this);
    return;
  }

  method boolean finished() { return isFinish; }

  method void update(){
    if(isBuildUp){
      do buildUp();
    } else {
      if(isActive){
        do active();
      } else {
        do release();
      }
    }
    do updateAttachment();
    do body.draw();
    return; 
  }

  method boolean hits(Figher f){
    var Square ob;
    let ob = f.getBody();
    return (body.collides(ob));
  }

  method void buildUp(){
    var int width;
    let width = body.getSizeX();
    if(width < reach){
      do body.setWidth(width + 4);
    } else {
      let isBuildUp = false;
      let isActive = true;
    }
    return; 
  }

  method void updateAttachment(){
    var int attachmentX;
    var int attachmentY;
    var Square casterBody;
    let casterBody = caster.getBody();
    let attachmentY = casterBody.getY() + 10;
    if (dir > 0){
      let attachmentX = casterBody.getRight(); 
    } else {
      let attachmentX = casterBody.getX() - body.getSizeX();
    }
    do body.setPosition(attachmentX, attachmentY);
    return;
  }

  method void release(){
    var int width;
    let width = body.getSizeX();
    if(width < reach){
      do body.setWidth(width - 6);
    } else {
      let isFinish = true;
    }
    return; 
  }

  method void active(){
    if(activeCounter < duration){
      let activeCounter = activeCounter + 1;
    } else {
      let isActive = false; 
    }
    return; 
  }

}