class Fighter {

  field boolean wasHit;
  field boolean activeHit;
  field boolean isPlayer;
  field boolean blocking;
  field Square body;
  field Fighter target;
  field int speed;
  field Hit hit;

  constructor Fighter new(){
    let wasHit = false;
    let activeHit = false;
    let speed = 4;
    let body = Square.new(0, 0, 40, 60);
    return this;
  }

  method void setOpponent(Fighter other){
    let target = other;
    return;
  }

  method void setPosition(int _x, int _y){
    body.setPosition(_x, _y);
    return;
  }

  method boolean dead(){ return wasHit; }

  method Square getBody() { return body; }

  method boolean isBlocking(){ return blocking; }

  method int getTargetDir(){
    var int offset;
    let offset = x - target.getBody().getX();
    if (offset < 0){ return -1; }
    else { return 1; }
  }

  method void dispose() {
      do body.dispose();
      do hit.dispose();
      do Memory.deAlloc(this);
      return;
   }

  method void update(){
    if (activeHit){
      do hit.update();
      if(hit.hits(target) & (~ blocking)){
        let wasHit = true;
      }
      if (hit.finished()){
        activeHit = false;
        hit.dispose();
      }
    }
    do body.draw();
  }

  method void handleInput(char key){
    let blocking = false;
    // Spacebar -> Strong Hit
    if(key = 32) {
      if (~ (activeHit)){
        do tryAttack(false);
      }
    }
    // C -> Quick Hit
    if(key = 67) {
      do tryAttack(false)
    }
    // Left Arrow -> Move Left
    if (key = 130){
      do move(-1);
    }
    // Right Arrow -> Move Right
    if (key = 132){
      do move(1);
    }
  }

  method void move(int dir){
    var int newX;
    let newX = body.getX() + (dir * speed);
    
    if( (newX > -200) & (newX + w < 1200)){
      let x = newX;
    } 

    if( ((dir < 0) & (target.getX() > x)) | ( (dir > 0) & (target.getX() < x) ) ){
      let blocking = true;
    }

    return;
  }

  method void tryAttack(boolean s){
    if (~ (activeHit)){
      if(s){
        do attackStrong();
      } else {
        do attackQuick();
      }
    }
  }

  method void attackQuick(){
    let hit = Hit.new(this, false);
    let activeHit = true;
    return;
  }

  method void attackStrong(){
    let hit = Hit.new(this, true);
    let activeHit = true;
    return;
  }

}