// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 


instruction code

1  11 0 100101 001 110
op 11 a cccccc ddd jjj
              (ADM)
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isAOp);
    Mux16(a=aluOut, b=instruction, sel=isAOp, out=muxA);
    Or(a=isAOp, b=instruction[5], out=isAOpOrRegA);
    ARegister(in=muxA, load=isAOpOrRegA, out=regA, out[0..14]=addressM);
    DRegister(in=aluOut, load=instruction[4], out=regD);
    Mux16(a=regA, b=inM, sel=instruction[12], out=muxAlu);
    ALU(x=regD, y=muxAlu, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=aluOut, out=outM, 
        zr=controlZ, 
        ng=controlN);
    Not(in=controlZ, out=notZ);
    Not(in=controlN, out=notN);
    And(a=notZ, b=notN, out=GT);
    And(a=notZ, b=controlN, out=LT);
    Or(a=controlZ, b=notN, out=EGT);
    Or(a=controlZ, b=controlN, out=ELT);
    Mux8Way(a=false, 
            b=GT, 
            c=controlZ, 
            d=EGT, 
            e=LT, 
            f=notZ, 
            g=ELT, 
            h=true, 
            sel=instruction[0..2], 
            out=jump);
    And(a=jump, b=instruction[15], out=jumpOnCInstr);
    Not(in=jumpOnCInstr, out=notJump);
    PC(in=regA, load=jumpOnCInstr, inc=notJump, reset=reset, out[0..14]=pc);
    And(a=instruction[15], b=instruction[3], out=writeM);
}